const puppeteer = require('puppeteer');

async function scrapeGoogleScholar(profileUrl) {
  //launch and wait for headless browser
  const browser = await puppeteer.launch({ headless: "new" });
  const page = await browser.newPage();

  // go to the profile url
  await page.goto(profileUrl, { waitUntil: 'domcontentloaded' });
  
  //handles pressing show more button until it is disabled
  let loadMoreButtonVisible = true;
  
  while (loadMoreButtonVisible) {
    loadMoreButtonVisible = await page.evaluate(async () => {
      //select the show more button
      const loadMoreButton = document.querySelector('#gsc_bpf_more');
      if (loadMoreButton && !loadMoreButton.disabled) {
        loadMoreButton.click();
        await new Promise(resolve => setTimeout(resolve, 1000));
        return !loadMoreButton.disabled; 
      }
      return false;
    });
  }


  // collect only the paper links from the profile page
  const paperLinks = await page.evaluate(() => {
    const paperElements = Array.from(document.querySelectorAll('.gsc_a_at'));
    //extract the link from href for each paper
    return paperElements.map(paper => paper.href); 
  });

  //visit each paper link, extract authors, and build the JSON
  const papers = [];
  let counter = 0;

  for (let link of paperLinks) {
    if (counter % 100 === 0 && counter !== 0) {
      // Add a delay every 50 iterations
      await new Promise(resolve => setTimeout(resolve, 10000));
    }

    await page.goto(link, { waitUntil: 'domcontentloaded' });
    // extract the title and authors from the paper page
    const paperDetails = await page.evaluate(() => {
      const titleElement = document.querySelector('.gsc_oci_title_link');
      //ternary operator used for debugging 
      const title = titleElement ? titleElement.innerText : 'Title not found';
      //handles splitting authors by comma and formatting
      const authorElements = Array.from(document.querySelectorAll('.gs_scl .gsc_oci_value'));
      const authors = authorElements.length ? authorElements[0].innerText.split(',').map(author => author.trim()) : [];

      return {
        title,
        authors
      };
    });

    // add paper details to the array
    papers.push(paperDetails);

    counter++;
  }

  //print the final JSON output
  //console.log(JSON.stringify(papers, null, 2));
  
  await browser.close();
  return papers;
}; 

(async () => {
  const profileUrl = 'https://scholar.google.com/citations?user=38ihKBAAAAAJ&hl=en&oi=sra';
  const papers = await scrapeGoogleScholar(profileUrl);
  console.log(JSON.stringify(papers,null,2));
  })();

module.exports = scrapeGoogleScholar;
